// @hash v3-AB4F6E83FA6D4351AEE5238CFD592C2C671EF814
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 7/1/2017 3:58:42 AM
///////////////////////////////////////////////////////////////////////////////
/// <reference path="../ReactReference/Scripts/react/react.js"/>
/// <reference path="../ReactReference/Scripts/react/react-dom.js"/>
/// <reference path="../ReactReference/Scripts/react/react-with-addons.js"/>
/// <reference path="../ReactReference/Scripts/EditorEvents.js"/>
/// <reference path="./bin/generated/Viewpoints.generated.js"/>
/// <reference path="./viewpoints.test.generated.js"/>

QUnit.test("ViewpointBox does not poll at an undefined interval", function (assert) {
    var testUtils = React.addons.TestUtils;
    var shallowRenderer = testUtils.createRenderer();

    shallowRenderer.render(React.createElement(ViewpointBox, null));

    var component = shallowRenderer.getRenderOutput();
    assert.equal(component.type, "div");
});

QUnit.test("ViewpointListItem displays the name as the title", function (assert) {
    var testUtils = React.addons.TestUtils;
    var shallowRenderer = testUtils.createRenderer();

    var name = "Life and times of Somebody";
    var description = "A detailed description of the Line and the time of sombody in history";
    shallowRenderer.render(React.createElement(ViewpointListItem, { name: name, children: description }));

    var component = shallowRenderer.getRenderOutput();
    assert.equal(3, component.props.children.length);
    var headerElement = component.props.children[0];
    assert.equal(headerElement.type, "h3");
    assert.equal(headerElement.props.children, name);

    assert.equal(component.type, "div");
});

QUnit.test("ViewpoitnListItem highlights its colour when the mouse hovers over it", function (assert) {
    var shallowRenderer = React.addons.TestUtils.createRenderer();

    shallowRenderer.render(React.createElement(ViewpointListItem, null));
    var component = shallowRenderer.getRenderOutput();

    component.props.onMouseEnter({});
    var color = component.props.style['background'];
    component = shallowRenderer.getRenderOutput();
    var newcolor = component.props.style['background'];

    assert.notEqual(color, newcolor);
    component.props.onMouseEnter({});
    component = shallowRenderer.getRenderOutput();
    var backToOriginalColor = component.props.style['background'];
    assert.equal(backToOriginalColor, color);
});